#dnf module disable nodejs -y
- name: Disable default version of nodejs
  ansible.builtin.shell: dnf module disable nodejs -y
#dnf module enable nodejs:18 -y
- name: Enable nodejs18 version
  ansible.builtin.shell:
    cmd: dnf module enable nodejs:18 -y
#dnf install nodejs -y
- name: Install nodejs
  ansible.builtin.dnf:
    name: nodejs
    state: installed
#useradd expense
- name: Add application user.
  ansible.builtin.user:
    name: expense
#common
- name: App Pre-Requisites
  ansible.builtin.include_role:
    name: common
    tasks_from: app_prereq
#npm install
- name: Install npm dependencies
  ansible.builtin.npm:
    name: npm
    path: /app
#     - name: Install npm dependencies
#       community.general.npm:
#         name: npm
#         path: /app
#/etc/systemd/system/backend.service
- name: Copy service files
  ansible.builtin.copy:
    src: backend.service
    dest: /etc/systemd/system/backend.service
#systemctl daemon-reload
#systemctl enable backend
#systemctl start backend
- name: Daemon-reload, enable and restart backend services
  ansible.builtin.systemd_service:
    name: backend
    enabled: true
    daemon-reload: true
#dnf install mysql -y
#dnf install python3-PyMySQL -y
- name: Install mysql and python3-PyMySQL
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    loop:
      - mysql
      - python3-PyMySQL
#mysql -h <MYSQL-SERVER-IPADDRESS> -uroot -pExpenseApp@1 < /app/schema/backend.sql
- name: load schema
  community.mysql.mysql_db:
    state: import
    name: all
    login_user: root
    login_password: "lookup('amazon.aws.aws_ssm', 'dev.mysql.root_password', region='us-east-1')"
    login_host: mysql-dev.aquireawsdevops.online
    target: /app/schema/backend.sql
